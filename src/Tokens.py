tokens = {
    '+':            TokenNomenclature.PLUS,
    '-':            TokenNomenclature.MINUS,
    '*':            TokenNomenclature.ASTERISK,
    '/':            TokenNomenclature.SLASH,
    '<':            TokenNomenclature.LESSTHAN,
    '>':            TokenNomenclature.GREATERTHAN,
    '=':            TokenNomenclature.EQUALS,
    '<=':           TokenNomenclature.LESSTHANEQUALS,
    '>=':           TokenNomenclature.GREATERTHANEQUALS,
    '<>':           TokenNomenclature.NOTEQUALS,
    ':=':           TokenNomenclature.ASSIGN,
    ';':            TokenNomenclature.SEMICOLON,
    ',':            TokenNomenclature.COMMA,
    ':':            TokenNomenclature.COLON,
    '[':            TokenNomenclature.SQRBROPEN,
    ']':            TokenNomenclature.SQRBRCLOSE,
    '(':            TokenNomenclature.PARENTHOPEN,
    ')':            TokenNomenclature.PARENTHCLOSE,
    '{':            TokenNomenclature.CURLYBROPEN,
    '}':            TokenNomenclature.CURLYBRCLOSE,
    '.':            TokenNomenclature.FULLSTOP,
    '#':            TokenNomenclature.COMMENT,
    'program':      TokenNomenclature.PROGRAM,
    'declare':      TokenNomenclature.DECLARE,
    'if':           TokenNomenclature.IF,
    'else':         TokenNomenclature.ELSE,
    'while':        TokenNomenclature.WHILE,
    'switchcase':   TokenNomenclature.SWITCHCASE,
    'forcase':      TokenNomenclature.FORCASE,
    'incase':       TokenNomenclature.INCASE,
    'case':         TokenNomenclature.CASE,
    'default':      TokenNomenclature.DEFAULT,
    'not':          TokenNomenclature.NOT,
    'and':          TokenNomenclature.AND,
    'or':           TokenNomenclature.OR,
    'function':     TokenNomenclature.FUNCTION,
    'procedure':    TokenNomenclature.PROCEDURE,
    'call':         TokenNomenclature.CALL,
    'return':       TokenNomenclature.RETURN,
    'in':           TokenNomenclature.IN,
    'inout':        TokenNomenclature.INOUT,
    'EOF':          TokenNomenclature.EOF
}
